#include<iostream>
using namespace std;

struct node{
    int data;
    node *next;
};

// Insertion
void add_at_end(node *head, int data){
    node *ptr;
    ptr = head;
    node *temp = new node();
    temp-> data = data;
    temp-> next = NULL;
    while(ptr->next != NULL){
        ptr = ptr->next;
    }
    
    ptr->next = temp;

}

node *add_at_beg(node *head, int data){
    node *ptr = new node();
    ptr->data = data;
    ptr->next = NULL;
    ptr->next = head;
    head = ptr;
    return head;
}

void add_at_pos(node *head, int data, int pos){
    node *temp;
    temp = head;
    node *ptr = new node();
    ptr->data = data;
    ptr->next = NULL;
    pos--;
    while(pos != 1){
        temp = temp->next;
        pos--;
    }
    ptr->next = temp->next;
    temp->next = ptr;
}

node *del_from_beg(node *head){
    if(head == NULL){
        cout<<"List is already empty..";
    }
    node *temp = head;
    ;
    head = temp->next;
    free(temp);
    return head;
}

// Deletion
void del_from_end(node *head){
    node *ptr = head;
    while(ptr->next->next != NULL){
        ptr = ptr->next;
    }
    free(ptr->next);
    ptr->next = NULL;
}

void  del_from_pos(node *head, int pos){
    node *current = head;
    node *previous = head;
    while(pos != 1){
        previous = current;
        current = current->next;
        pos--;
    }
    previous->next = current->next;
    free(current);


}

// Reversing
node *reverse(node *head){
    node *previous = NULL;
    node *current = NULL;
    while(head != NULL){
        current = head->next;
        head->next = previous;
        previous = head;
        head = current;
    }
    head = previous;
    return head;
}


void print(node *head){
    node *ptr;
    ptr = head;
    while(ptr != NULL){
        cout<<ptr->data<<" ";
        ptr = ptr->next;
    }
}

int main(){
    node *head = new node();
    head-> data = 10;
    head-> next = NULL;

    add_at_end(head, 20);
    add_at_end(head, 30);
    
    head = add_at_beg(head, 40);
    head = add_at_beg(head, 50);

    add_at_pos(head, 70, 3);
    add_at_pos(head, 60, 5);

    //head = del_from_beg(head);

    //del_from_end(head);

    //del_from_pos(head, 3);
    //del_from_pos(head, 4);

    head = reverse(head);

    print(head);

    return 0;
}
