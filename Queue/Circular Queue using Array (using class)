#include<iostream>
using namespace std;

class queue{
    private:
        int size;
        int front;
        int rear;
        int *Q;
    
    public:
        queue(int size);
        ~queue();
        bool isFull();
        bool isEmpty();
        void enqueue(int x);
        int dequeue();
        void display();
};

queue::queue(int size){
    this->size = size;
    front = 0;
    rear = 0;
    Q = new int[size];
}

queue::~queue(){
    delete [] Q;
}

bool queue::isEmpty(){
    if(front == rear){
        return true;
    }
    return false;
}

bool queue::isFull(){
    if((rear+1) % size == front){
        return true;
    }
    return false;
}

void queue::enqueue(int x){
    if(isFull()){
        cout<<"Queue Overflow.."<<endl;
    }
    else{
        rear = (rear+1) % size;
        Q[rear] = x;
    }
}

int queue::dequeue(){
    int x = -1;
    if(isEmpty()){
        cout<<"Queue is empty.."<<endl;
    }
    else{
        front = (front+1) % size;
        x = Q[front];
    }
    return x;
}

void queue::display(){
    int i = front+1;
    do{
        cout<<Q[i]<<flush;
        if(i < rear){
            cout<<" <- "<<flush;
        }
        i = (i+1) % size; 
    }while(i != (rear+1)%size);
}

int main(){
    int A[] = {1, 3, 5, 7, 9};
    int size = sizeof(A)/sizeof(A[0]);
    queue q(size+1);

    for(int i=0; i<size; i++){
        q.enqueue(A[i]);
    }
    q.display();
    cout<<endl;

    q.enqueue(10);

    for (int i=0; i<size; i++){
        q.dequeue();
    }
    q.dequeue();

    return 0;
}
