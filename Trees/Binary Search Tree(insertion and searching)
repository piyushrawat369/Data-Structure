#include<iostream>
using namespace std;

class node{
    public:
        node* lchild;
        int data;
        node* rchild;
};

class BST{
    private:
        node* root;
    
    public:
        BST(){ root = nullptr; }
        node* getRoot(){ return root; }
        void insert(int key);
        void inorder(node* p);
        node* search(int key);
};

void BST::insert(int key){
    node* t = root;
    node* p;
    node* r;
    if(root == nullptr){
        p = new node;
        p->data = key;
        p->lchild = NULL;
        p->rchild = NULL;
        root = p;
        return;
    }
    while(t != nullptr){
        r = t;
        if(key < t->data){
            t = t->lchild;
        }
        else if(key > t->data){
            t = t->rchild;
        }
        else{
            return;
        }
    }

    p = new node;
    p->data = key;
    p->lchild = nullptr;
    p->rchild = nullptr;

    if(key < r->data){
        r->lchild = p;
    }
    else{
         r->rchild = p;
    }
}

void BST::inorder(node *p){
    if(p){
        inorder(p->lchild);
        cout<<p->data<<" , "<<flush;
        inorder(p->rchild);
    }
}

node* BST::search(int key){
    node* t = root;
    while(t != nullptr){
        if(key == t->data){
            return t;
        }
        else if(key < t->data){
            t = t->lchild;
        }
        else{
            t = t->rchild;
        }
    }
    return nullptr;
}

int main(){
    BST bst;

    bst.insert(10);
    bst.insert(5);
    bst.insert(20);
    bst.insert(8);
    bst.insert(30);

    // inorder traversal
    bst.inorder(bst.getRoot());
    cout<<endl;

    // Sesrch
    node *temp = bst.search(2);
    if(temp != nullptr){
        cout<<temp->data<<endl;
    }else{
        cout<<"Element not found.."<<endl;
    }
    return 0;
}
